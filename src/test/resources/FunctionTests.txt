# abs
abs(123)=123
abs(-123)=123
abs(123.456)=123.456
abs(-123.456)=123.456
abs(null)=0
abs(false)=0
abs(true)=1
abs('123')=123
abs('-123')=123
abs('minus one hundred and twenty-three')=0
abs(flatmap)=0

# ceil
ceil(123)=123
ceil(-123)=-123
ceil(123.456)=124
ceil(-123.456)=-123
ceil(0.0001)=1
ceil(Inf)=Inf
ceil(null)=0
ceil(false)=0
ceil(true)=1
ceil('123')=123
ceil('-123')=-123
ceil('minus one hundred and twenty-three')=0
ceil(flatmap)=0

# every
every(['a', 'b', 'c'], p => p == 'a')=false
every(['a', 'b', 'c'], p => p != '1')=true
every(['a', 'b', 'c'], p => true)=true
every([], p => false)=true
every(11)=false
every(null)=false
['a', 'b', 'c'].every(p => p == 'a')=false
['a', 'b', 'c'].every(p => p != '1')=true
['a', 'b', 'c'].every(p => true)=true
foorbararray.every(p => p)=true
mixedarray.every(p => p)=false

# filter
filter([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 4 == 0) == [4, 8]=true
filter([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 10 == 0).size()=0
filter(['a', 'b', 'c'], p => p == 'd').size()=0
filter(['a', 'b', 'c'], p => p == 'a')[0]="a"
size(filter([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 2 == 0))=4
filter([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 2 == 0) == [2, 4, 6, 8]=true
filter([], p => p % 2 == 0) == []=true
filter(null) == []=true
filter(null).size()=0
filter(null, p => true).size()=0
filter(1).size()=0
filter(1, p => true).size()=0
filter(false).size()=0
filter(false, p => true).size()=0
filter(true).size()=0
filter(true, p => true).size()=0
filter("asdasdffa").size()=0
filter("asdasdffa", p => true).size()=0

# find
find([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 4 == 0)=4
find([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 10 == 0)=null
find(null)=null
find(null, p => true)=null
find(1)=null
find(1, p => true)=null
find(false)=null
find(false, p => true)=null
find(true)=null
find(true, p => true)=null
find("asdasdffa")=null
find("asdasdffa", p => true)=null

# findIndex
findIndex([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 4 == 0)=3
findIndex([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 10 == 0)=-1
findIndex(null)=-1
findIndex(null, p => true)=-1
findIndex(1)=-1
findIndex(1, p => true)=-1
findIndex(false)=-1
findIndex(false, p => true)=-1
findIndex(true)=-1
findIndex(true, p => true)=-1
findIndex("asdasdffa")=-1
findIndex("asdasdffa", p => true)=-1

# floor
floor(123)=123
floor(-123)=-123
floor(123.456)=123
floor(-123.456)=-124
floor(0.0001)=0
floor(Inf)=Inf
floor(null)=0
floor(false)=0
floor(true)=1
floor('123')=123
floor('-123')=-123
floor('minus one hundred and twenty-three')=0
floor(flatmap)=0

# isNaN
isNaN(null)=false
isNaN(false)=false
isNaN(true)=false
isNaN(1)=false
isNaN(100)=false
isNaN(0/0)=true
isNaN(iamnull)=false
isNaN(xxxxxx)=false
isNaN(empty)=false
isNaN(emptyarray)=false
isNaN(flatmap)=false

# isNull
isNull(null)=true
isNull(false)=false
isNull(true)=false
isNull(1)=false
isNull(100)=false
isNull(0/0)=false
isNull(iamnull)=true
isNull(xxxxxx)=true
isNull(empty)=false
isNull(emptyarray)=false
isNull(flatmap)=false

# keys
keys('asdasd') == []=true
keys(true) == []=true
keys(false) == []=true
keys(123) == []=true
null.keys() == []=true
foorbararray.keys() == []=true
flatmap.keys() == ['a', 'one', '2', 'isnull'] || flatmap.keys() == ['2', 'a', 'one', 'isnull']=true
complexmap.keys() == ['ismap', 'isarrayofmap', 'nestedflatmap']=true

# map
map([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 4 == 0) == [false, false, false, true, false, false, false, true, false]=true
map([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p % 10 == 0) == [false, false, false, false, false, false, false, false, false]=true
map([1, 2, 3, 4, 5, 6, 7, 8, 9], p => p * 2) == [2, 4, 6, 8, 10, 12, 14, 16, 18]=true
map([], p => p * 2) == []=true
map(null).size() == 0=true
map(null, p => true).size() == 0=true
map(1).size() == 0=true
map(1, p => true).size() == 0=true
map(false).size() == 0=true
map(false, p => true).size() == 0=true
map(true).size() == 0=true
map(true, p => true).size() == 0=true
map("asdasdffa").size() == 0=true
map("asdasdffa", p => true).size() == 0=true

# max
max(null, null, null)=0
max(null, null, 5, null)=5
max(5)=5
max(5, 10)=10
max(5, 10, 30, 40)=40
max(5, [10, 30, 40])=40
max(5, [10, [30, 40]])=40
5.max()=5
5.max(2)=5
5.max(11, 2)=11
'afskjhasd'.max()=0
max(1, 2, '3')=3
max(flatmap)=0

# min
min(null, null, null)=0
min(null, null, 5, null)=0
min(5)=5
min(5, 10)=5
min(5, 10, 30, 40)=5
min(5, [10, 30, 40])=5
min(5, [10, [30, 40]])=5
5.min()=5
5.min(2)=2
5.min(11, 2)=2
'afskjhasd'.min()=0
min(1, 2, '3')=1
min(flatmap)=0

# nonexistantfunction
nonexistantfunction(1)=null
[1, 2, 3].nonexistantfunction()=null

# reduce
[].reduce()=null
[0, 1, 2, 3].reduce()=null
[].reduce(x => 10)=null
reduce(null, x => 10)=null
reduce(4, x => 10)=null
reduce(true, x => 10)=null
reduce(false, x => 10)=null
reduce('kwyjibo', x => 10)=null
['a'].reduce(x => 'c')="c"
[0, 1, 2, 3].reduce(x => x)=null
[0, 1, 2, 3].reduce(x => x, 5)=5
[0, 1, 2, 3].reduce((x) => x)=null
[0, 1, 2, 3].reduce((x) => x, 5)=5
[0, 1, 2, 3].reduce((x, y) => x + y)=6
[0, 1, 2, 3].reduce((x, y) => x + y, 5)=11
[0, 1, 2, 3].reduce((x, y, z) => x + y + z)=12
[0, 1, 2, 3].reduce((x, y, z) => x + y + z, 5)=17
[0, 1, 2, 3].reduce((x, y, z, array) => x + y + array[z])=12
[0, 1, 2, 3].reduce((x, y, z, array) => x + y + array[z], 5)=17

# round
round(-134.1223)=-134
round(-21.5)=-21
round(-20.5)=-20
round(-0.00001)=0
round(0)=0
round(0.00001)=0
round(1)=1
round(1.1)=1
round(1.49999)=1
round(1.5)=2
round(1.500001)=2
round(1.535)=2
round(2.5)=3
round(3.5)=4
round(20.5)=21
round(21.5)=22
round(134.1223)=134

# roundBankers
roundBankers(-134.1223)=-134
roundBankers(-21.5)=-22
roundBankers(-20.5)=-20
roundBankers(-0.00001)=0
roundBankers(0)=0
roundBankers(0.00001)=0
roundBankers(1)=1
roundBankers(1.1)=1
roundBankers(1.49999)=1
roundBankers(1.5)=2
roundBankers(1.500001)=2
roundBankers(1.535)=2
roundBankers(2.5)=2
roundBankers(3.5)=4
roundBankers(20.5)=20
roundBankers(21.5)=22
roundBankers(134.1223)=134

# size
size("12345")=5
"12345".size()=5
size('kwyjibo')=7
size([1, 2, 3, 4, 5])=5
[1, 2, 3, 4, 5].size()=5
size("")=0
size([])=0
size(false)=0
size(true)=0
size(null)=0
size(12345)=0
size([1, 2, 3, [4, 5, 6, 7]])=4
size(flatmap)=0
mixedarray.size()=3
nestedarray.size()=2

# some
some(['a', 'b', 'c'], p => p == 'a')=true
some(['a', 'b', 'c'], p => p == '1')=false
some(['a', 'b', 'c'], p => p != '1')=true
some(['a', 'b', 'c'], p => true)=true
some([], p => false)=false
some(11)=false
some(null)=false
['a', 'b', 'c'].some(p => p == 'a')=true
['a', 'b', 'c'].some(p => p != '1')=true
['a', 'b', 'c'].some(p => true)=true
foorbararray.some(p => p)=true
mixedarray.some(p => p)=true

# substring
null.substring()=""
3.substring()="3"
1234.substring(1,2)="2"
false.substring()="false"
false.substring(2,4)="ls"
true.substring()="true"
['asdf'].substring()="[asdf]"
'foobarbaz'.substring()="foobarbaz"
'foobarbaz'.substring(0)="foobarbaz"
'foobarbaz'.substring(3)="barbaz"
'foobarbaz'.substring(-3)="foobarbaz"
'foobarbaz'.substring(0, 6)="foobar"
'foobarbaz'.substring(3, 6)="bar"
'foobarbaz'.substring(6, 3)="bar"
'foobarbaz'.substring(-6, 3)="foo"
'foobarbaz'.substring(3, 3)=""

# sum
sum(1, 2, 3)=6
sum([1, 2, 3])=6
sum([1, [2, 3]])=6
sum([[1, [2], [[3]]]])=6
[1, 2, 3].sum()=6
sum('a', 'b', null, true, false, true)=2
sum(flatmap)=0

# toLowerCase
'foo'.toLowerCase()="foo"
'FoO'.toLowerCase()="foo"
'FOO'.toLowerCase()="foo"
null.toLowerCase()=""
false.toLowerCase()="false"
true.toLowerCase()="true"
[].toLowerCase()="[]"

# toUpperCase
'foo'.toUpperCase()="FOO"
'FoO'.toUpperCase()="FOO"
'FOO'.toUpperCase()="FOO"
null.toUpperCase()=""
1.toUpperCase()="1"
false.toUpperCase()="FALSE"
true.toUpperCase()="TRUE"
[].toUpperCase()="[]"

# values
values('asdasd') == []=true
values(true) == []=true
values(false) == []=true
values(123) == []=true
null.values() == []=true
foorbararray.values() == []=true
flatmap.values() == ['a', 1, "two", null] || flatmap.values() == ["two", 'a', 1, null]=true
complexmap.values()[0].a="alpha"

# custom function
customFunction(5)="extracted 5 from custom function"
customFunction(2)="extracted 2 from custom function"